#!/usr/bin/env perl

local $SIG{ALRM} = sub { exit 1 };
alarm 10;

use Data::Dumper;
use JSON;
use POSIX;
use File::Temp qw/ :POSIX /;
use IPC::Open2;
use IPC::Open3;

my $json = JSON->new->allow_nonref;

# read information from which the category will be derived
my @lines = <STDIN>;
my $req = $json->decode( join( "", @lines ) );
my $snapshot_key = $req;

my $in_file = tmpnam();
my $out_file = tmpnam();

# define category
my @objects = ( "ArticleTitle", "ArticleVersion" );
my @arrows = ();

my $result = {
	"objects" => \@objects,
	"arrows" => \@arrows
};

my $arrow = {
	"name" => $snapshot_key,
	"domain" => "ArticleTitle",
	"codomain" => "ArticleVersion",
	"in" => $in_file,
	"out" => $out_file,
	"pid" => $$
};

push( @arrows, $arrow );

print $json->encode( $result );

POSIX::mkfifo( $in_file, 0700 );
POSIX::mkfifo( $out_file, 0700 );

close STDIN;
close STDOUT;
close STDERR;

# process requests
my $article_version = {};

while ( 1 ) {

	# read request
	open my $in_fh, $in_file;
	my @req_lines = <$in_fh>;
	close $in_fh;

	my $req_json = join( "", @req_lines );
	my $req = $json->decode( $req_json );

	# process request
	my $result = "";

	if ( ! defined( $article_version->{$req} ) ) {
		# FIXME: do this without a temporary file
		my $sub_rpc_req = [ "map", "CurrentVersion : ArticleTitle -> ArticleVersion", $req ];
		$sub_rpc_req_json = $json->encode( $sub_rpc_req );
		my $req_file = tmpnam();
		my $req_file_fh;
		open $req_file_fh, ">" . $req_file;
		print $req_file_fh $sub_rpc_req_json;
		close $req_file_fh;
		my $cmd = $ENV{"LITCOMP_HOME"} . "/src/pl/rpc2.pl < $req_file";
		$sub_rpc_req_out = `$cmd`;
		unlink $req_file;
		$article_version->{$req} = $json->decode( $sub_rpc_req_out );

	}

	$result = $article_version->{$req};

	# output request
	my $out_json = $json->encode( $result );
	open my $out_fh, "> " . $out_file;
	print $out_fh $out_json;
	print $out_fh "\n";
	close $out_fh;
}
